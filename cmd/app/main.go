// @title WalletApp API
// @version 1.0
// @description API for wallet application
// @host localhost:8080
// @BasePath /api

package main

import (
	"log"
	_ "walletapp/docs" // docs is generated by Swag CLI, you have to import it.
	"walletapp/internal/db"
	"walletapp/internal/handlers"
	"walletapp/internal/services"

	"github.com/gin-gonic/gin"
	"github.com/joho/godotenv"
	swaggerFiles "github.com/swaggo/files"
	ginSwagger "github.com/swaggo/gin-swagger"
)

func main() {
	// Load .env file
	err := godotenv.Load(".env") // Adjust path based on where your .env file is
	if err != nil {
		log.Println("No .env file found")
	}

	db.Connect()

	// Create service implementations
	walletRepo := services.NewWalletRepoImpl()
	transactionRepo := services.NewTransactionRepoImpl()
	dbImpl := services.NewDBImpl()

	// Create and wire up the wallet service
	walletService := services.NewWalletService(walletRepo, transactionRepo, dbImpl)

	// Set the default service for legacy function compatibility
	services.SetDefaultService(walletService)

	router := gin.Default()

	// Redirect home page to Swagger UI
	router.GET("/", func(c *gin.Context) {
		c.Redirect(302, "/swagger/index.html")
	})

	// Swagger route
	router.GET("/swagger/*any", ginSwagger.WrapHandler(swaggerFiles.Handler))

	// Health check endpoint
	router.GET("/health", func(c *gin.Context) {
		c.JSON(200, gin.H{"status": "ok", "message": "wallet service is running"})
	})

	// Grouped routes
	api := router.Group("/api")
	{
		// User
		api.GET("/users", handlers.GetUsers)
		api.GET("/users/:id", handlers.GetUserByID)
		api.POST("/users", handlers.CreateUser)

		// Wallet & Transaction
		api.POST("/wallets/:user_id/deposit", handlers.Deposit)
		api.POST("/wallets/:user_id/withdraw", handlers.Withdraw)
		api.GET("/wallets/:user_id/balance", handlers.GetBalance)
		api.POST("/wallets/transfer", handlers.Transfer)
		api.GET("/wallets/:user_id/transactions", handlers.GetTransactionHistory)
	}

	router.Run(":8080")
}
